#include "opencl/errors.hpp"

std::string cl::errors::to_string(cl_int ecode) {
#define E2STR(x) case x: return (#x)
        switch (ecode) {
            E2STR(CL_SUCCESS);
            E2STR(CL_DEVICE_NOT_FOUND);
            E2STR(CL_DEVICE_NOT_AVAILABLE);
            E2STR(CL_COMPILER_NOT_AVAILABLE);
            E2STR(CL_MEM_OBJECT_ALLOCATION_FAILURE);
            E2STR(CL_OUT_OF_RESOURCES);
            E2STR(CL_OUT_OF_HOST_MEMORY);
            E2STR(CL_PROFILING_INFO_NOT_AVAILABLE);
            E2STR(CL_MEM_COPY_OVERLAP);
            E2STR(CL_IMAGE_FORMAT_MISMATCH);
            E2STR(CL_IMAGE_FORMAT_NOT_SUPPORTED);
            E2STR(CL_BUILD_PROGRAM_FAILURE);
            E2STR(CL_MAP_FAILURE);
#ifdef CL_VERSION_1_1
            E2STR(CL_MISALIGNED_SUB_BUFFER_OFFSET);
            E2STR(CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
#endif
#ifdef CL_VERSION_1_2
            E2STR(CL_COMPILE_PROGRAM_FAILURE);
            E2STR(CL_LINKER_NOT_AVAILABLE);
            E2STR(CL_LINK_PROGRAM_FAILURE);
            E2STR(CL_DEVICE_PARTITION_FAILED);
            E2STR(CL_KERNEL_ARG_INFO_NOT_AVAILABLE);
#endif

            E2STR(CL_INVALID_VALUE);
            E2STR(CL_INVALID_DEVICE_TYPE);
            E2STR(CL_INVALID_PLATFORM);
            E2STR(CL_INVALID_DEVICE);
            E2STR(CL_INVALID_CONTEXT);
            E2STR(CL_INVALID_QUEUE_PROPERTIES);
            E2STR(CL_INVALID_COMMAND_QUEUE);
            E2STR(CL_INVALID_HOST_PTR);
            E2STR(CL_INVALID_MEM_OBJECT);
            E2STR(CL_INVALID_IMAGE_FORMAT_DESCRIPTOR);
            E2STR(CL_INVALID_IMAGE_SIZE);
            E2STR(CL_INVALID_SAMPLER);
            E2STR(CL_INVALID_BINARY);
            E2STR(CL_INVALID_BUILD_OPTIONS);
            E2STR(CL_INVALID_PROGRAM);
            E2STR(CL_INVALID_PROGRAM_EXECUTABLE);
            E2STR(CL_INVALID_KERNEL_NAME);
            E2STR(CL_INVALID_KERNEL_DEFINITION);
            E2STR(CL_INVALID_KERNEL);
            E2STR(CL_INVALID_ARG_INDEX);
            E2STR(CL_INVALID_ARG_VALUE);
            E2STR(CL_INVALID_ARG_SIZE);
            E2STR(CL_INVALID_KERNEL_ARGS);
            E2STR(CL_INVALID_WORK_DIMENSION);
            E2STR(CL_INVALID_WORK_GROUP_SIZE);
            E2STR(CL_INVALID_WORK_ITEM_SIZE);
            E2STR(CL_INVALID_GLOBAL_OFFSET);
            E2STR(CL_INVALID_EVENT_WAIT_LIST);
            E2STR(CL_INVALID_EVENT);
            E2STR(CL_INVALID_OPERATION);
            E2STR(CL_INVALID_GL_OBJECT);
            E2STR(CL_INVALID_BUFFER_SIZE);
            E2STR(CL_INVALID_MIP_LEVEL);
            E2STR(CL_INVALID_GLOBAL_WORK_SIZE);
#ifdef CL_VERSION_1_1
            E2STR(CL_INVALID_PROPERTY);
#endif
#ifdef CL_VERSION_1_2
            E2STR(CL_INVALID_IMAGE_DESCRIPTOR);
            E2STR(CL_INVALID_COMPILER_OPTIONS);
            E2STR(CL_INVALID_LINKER_OPTIONS);
            E2STR(CL_INVALID_DEVICE_PARTITION_COUNT);
#endif
#ifdef CL_VERSION_2_0
            E2STR(CL_INVALID_PIPE_SIZE);
            E2STR(CL_INVALID_DEVICE_QUEUE);
#endif
#ifdef CL_VERSION_2_2
            E2STR(CL_INVALID_SPEC_ID);
            E2STR(CL_MAX_SIZE_RESTRICTION_EXCEEDED);
#endif
            default:
            return "Unknown error";
        }
#undef E2STR
    }
